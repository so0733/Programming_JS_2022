Let's Get IT 자바스크립트 프로그래밍 [2021.01.21] ------------------------------------------------------

🔎 유용한 사이트
     ◾ MDN Web Docs [https://developer.mozilla.org/ko/docs/Web/JavaScript]
     ◾ 모던 자바스크립트 튜토리얼 [https://ko.javascript.info/intro]
     ◾ 더북 [https://thebook.io/080270/]

📌 JavaScript(JS) : '웹페이지에 생동감을 불어넣기 위해' 만들어진 프로그래밍 언어
     ◾ 스크립트(script) : 자바스크립트로 작성한 프로그램, 웹페이지의 HTML안에 작성, 웹페이지를 불러올 때 스크립트가 자동 실행됨

     ◾ 자바스크립트 엔진을 통해 브라우저 뿐만 아니라 서버에서도 실행 가능함
	크롬, 엣지, 오페라	- V8
	파이어폭스	- 스파이더몽키(SpiderMonkey)
	사파리		- 웹킷(WebKit)

     ◾ 자바스크립트 장점
	1. HTML/CSS와 완전히 통합할 수 있음
	2. 간단한 일은 간단하게 처리할 수 있음
	3. 모든 주요 브라우저에서 지원하고 기본 언어로 사용됨

     ◾ 코드 에디터
	Visual Studio Code(VS Code)	- 크로스 플랫폼, 무료
	Sublime Text		- 크로스 플랫폼, 셰어웨어
	WebStorm		- 크로스 플랫폼, 유료
	Atom			- 크로스 플랫폼, 무료

     ◾ 브라우저 개발자 도구
	1. 브라우저에 마우스 커서를 둔 상태로 F12 누름
	2. 개발자 도구가 열리면 상단에 있는 메뉴 중 Console 탭 클릭
	프롬프트(prompt) : Console 탭 아래에 빈 공간에 > 모양 옆에 코드 입력

     ◾ 인터프리터(interpreter) 방식 : 코드를 한 덩어리씩 실행해 결과를 출력하는 방식

     ◾ REPL(Read-Eval-Print Loop)
	Read	- 코드를 한줄씩 입력받음
	Eval 	- 받은 입력을 평가함
	Print	- 결과를 출력함
	Loop	- 새로운 입력을 기다리는 과정을 반복함

📌 순서도
     ◾ 순서도에서 사용하는 도형과 기호
	두 겹의 원	- 시작과 끝
	타원		- 일반 절차
	마름모		- 판단 절차
	두겹의 사각형	- 특수한 상황(대기, 이벤트 발생)
	화살표		- 다음 절차로 가는 흐름

Let's Get IT 자바스크립트 프로그래밍 [2021.01.24] ------------------------------------------------------

📌 코드 작성 규칙
     ◾ 세미콜론(;) : 명령이 끝난 후 붙여 다음 명령어를 구분함
     ◾ 주석 : 설명을 작성한 부분
	1. 한 줄 주석	- 주석 앞에 //를 넣음
	2. 여러 줄 주석	- 주석 처리 하고 싶은 부분을 /* */로 감쌈
     ◾ 들여쓰기 : 코드의 가독성 향상이 됨

📌 자료형(data type) : 값의 종류			🔎 값(value) : 프로그램이 조작할 수 있는 데이터
     1. 문자열(string) : 문자들이 하나 이상 나열되어 있음
	◾ \n		- 문자열 내에서 문자들을 여러 줄에 걸쳐 나타나게함
	◾ 템플릿 리터럴	- 백틱(`)으로 감싸진 문자열

     2. 숫자(number) : 따옴표로 감싸지 않고 그대로 작성
	◾ Infinity	- 무한 값 (∞, 무한대)
	◾ NaN	- 숫자로 인식됨

	◾ bigInt : 정수 리터럴 끝에 n을 붙여 길이에 상관없이 정수를 나타냄
	◾ parseInt : 문자열을 정수로만 바꿈
	◾ parseFloat : 문자열을 실수로 바꿈

	🔎 진법 표현
	   2진법	- 0b(숫자영, 소문자b)를 숫자 앞에 붙임
	   8진법	- 0o(숫자영, 소문자o)를 숫자 앞에 붙임
	   16진법	- 0x(숫자영, 소문자x)를 숫자 앞에 붙임

	🔎 형 변환(type casting) : 값의 자료형이 바뀌는 현상 또는 바꾸는 행위

     3. 불 값(boolean) : true와 false를 나타냄
	◾ true	- 참인 값
	◾ false	- 거짓인 값

	🔎 charCodeAt : 문자의 번호를 나타냄

     4. 빈 값
	◾ undefined : 항상 부수적으로 undefined가 식의 결과값으로 반환됨
	◾ null : 빈 값

	🔎 typeof 연산자 : 피연산자의 자료형을 알려줌
	   숫자, Nan	- "number"
	   문자열		- "string"
	   true, false	- "boolean"
	   null		- "object"
	   undefined	- "undefined"
	   함수		- "function"
	   함수가 아닌 객체	- "object"

📌 연산자(operator) : 어떠한 값에 특정 작업을 수행하라는 기호
     ◾ 산술 연산자
	+ (덧셈), - (뺄셈),  *(곱셈), /(나눗셈), %(나머지), **(거듭제곱)

     ◾ 비교 연산자
	==	: 양쪽 값이 같은지 비교하는 연산자
	===	: 값을 비교할 때 값 뿐만 아니라 자료형도 같은지 비교함
	!=	: 양쪽 값이 다른지 비교하는 연산자

     ◾ 논리 연산자
	&& 연산자	- 그리고, 좌측 식과 우측 식이 모두 true여야 결과도 true
	|| 연산자		- 또는, 좌측 식이나 우측 식 둘 중 하나만 true면 결과는 true
	! 연산자		- 참을 거짓으로 거짓을 참으로 만드는 연산자
 	

📌 변수(variable) : 변하는 수, 데이터를 저장할 때 쓰이는 '이름이 붙은 저장소'
     ◾ let		let 변수명 = 식;
     ◾ var		var 변수명 = 식;

     ◾ 초기화 : 변수를 선언함과 동시에 값을 대입함
     ◾ 예약어 : 자바스크립트 내부에서 특정 역할을 수행하므로 변수명으로 쓸 수 없음
	await, break, case, catch, class, const, continue, debugger, default, delete, do, else, enum, export, extends, false, finally, for, 
	function, if, import, in, isstanceof, new, null, return, super, switch, this, throw, true, try, typeof, var, void, while, with, yield

📌 상수(constant) : 변하지 않는 수
     ◾ const	const 변수명 = 식;

📌 alert : 메시지를 보여줌

📌 prompt() : 직접 값을 입력할 수 있음

Let's Get IT 자바스크립트 프로그래밍 [2021.01.25] ------------------------------------------------------

🔎 콘솔 창에서 줄바꿈 : Shift + Enter

📌 조건문 : 주어진 조건에 따라 코드를 실행하거나 실행하지 않는 문	
     1. if문
	if (조건식) {
	   실행문1;
	   실행문2;
	}
     2. if-else문
	if (조건식) {	// 조건식이 참인 값일 때 실행
	   실행문;
	} else {		// 조건식이 거짓인 값일 때 실행
	   실행문;
	}
     3. if-else if-else문
	if (조건식) {
	   실행문;
	} else if (조건식) {
	   실행문;
	} else {
	   실행문;
	}

     ◾ if-else if문
	if (조건식) {
	   실행문;
	} else if (조건식) {
	   실행문;
	} else if (조건식) {
	   실행문;
	}

     4. switch문 : 특정 변수를 다양한 상황에서 비교함
	switch (조건식) {
	   case 비교 조건식:
	      실행문;
	}

     5. 조건부 연산자(삼항 연산자) : 식으로 결과값이 출력됨
	조건식 ? 참일 때 실행되는 식 : 거짓일 때 실행되는 식

📌 반복문
     1. while문 : 조건식이 참인 동안 반복해서 실행문을 실행
	while (조건식) {
	   실행문1;
	   실행문2;
	}

     2. do-while문 : 결과와 상관없이 무조건 한번은 루프를 실행함
	do {
	   실행문
	} while (조건식)

     3. for문
	for (시작; 조건식; 종료식)
	   실행문;

     ◾ break문 : 반복문을 멈춤

     ◾ continue문 : 루프 내에서 사용해 해당 루프의 나머지 부분을 건너뛰고 바로 다음 표현식으로 넘어감

     ◾ 중첩 반복문 : 반복문 안에 반복문이 들어 있음

📌 객체(object) : 자료형의 일종으로 다양한 값을 모아 둔 또다른 값
     ◾ 배열(array), 함수(function), 배열이나 함수가 아닌 객체

📌 배열(array) : 값들을 하나로 묶음
	var arr = [배열요소1, 배열요소2, ...];		// 1. 배열 리터럴 이용
	var arr = Array(배열요소1, 배열요소2, ...);	// 2. Array 객체 생성자 이용
	var arr = new Array(배열요소1, 배열요소2, ...);	// 3. new 연산자를 이용해 Array 객체 생성

     ◾ 인덱스(index) : 자릿수, 자릿수는 0부터 시작함
     ◾ 요소(element) : 배열 내부의 값

     ◾ 배열 참조
	배열이름 [인덱스]

     ◾ 배열의 요소 개수 구하기 : 배열 이름 뒤에 .length를 붙임
	console.log(배열이름.length);

     ◾ 배열에 요소 추가
	push	- 배열 맨 뒤에 요소를 추가함
	unshift	- 배열 맨 앞에 요소를 추가함

     ◾ 배열에 요소 제거
	pop	- 배열 끝 요소를 제거하고 제거한 요소를 반환함
	shift	- 배열 앞 요소를 제거하고 제거한 요소를 반환함
	splice	- 중간 요소를 제거함, 첫 번째는 시작 인덱스, 두 번째는 제거할 요소의 개수

     ◾ 배열에서 요소 찾기
	includes		- 
	indexOf		- 앞에서부터 주어진 값이 있는지 찾음
	lastIndexOf	- 뒤에서 부터 찾음

📌 함수(function) : 특정한 작업을 수행하는 코드
     ◾ function 예약어
	function 함수이름 (매개변수1, 매개변수2, ...) {
		실행문;
	}

     ◾ 화살표 함수(arrow function) : 화살표 기호를 사용한 함수
	( ) => { }

     🔎 지역 변수 - 함수 내에서 선언한 변수
     🔎 전역 변수 - 같은 이름을 가진 지역 변수에 의해 가려지지만 않는다면 모든 함수에서 접근이 가능

     ◾ return(반환)문 : 함수의 실행을 중단하고, return 표현식의 값을 호출자에게 반환함

     ◾ 인수(argument)	- 함수가 호출될 때 함수로 값을 전달해주는 변수나 상수
     ◾ 매개변수(parameter)	- 인수(argument)로 전달된 값을 함수 내부에서 사용할 수 있게 해주는 변수

     ◾ 객체(object) : 이름(name)과 값(value)으로 구성된 프로퍼티(property)의 정렬되지 않은 집합

     ◾ 객체 리터럴 : { }를 사용해 객체를 표현
	const 객체 = {
	   속성1 이름 : 속성1값,
	   속성2 이름 : 속성2값,
	   속성3 이름 : 속성3값,
	}

     ◾ 객체 속성 수정 : 변수. 속성 = 값;
     ◾ 객체 속성 제거 : delete 변수.속성;

     ◾ 메서드(method) : 객체의 속성 값으로 함수가 들어감

Let's Get IT 자바스크립트 프로그래밍 [2021.02.01] ------------------------------------------------------

📌 순서도 그리기
     ◾ 프로그램 절차 원칙
	1. 프로그램 절차의 개수는 정해져 있어야 함
	2. 각 절차는 항상 같은 내용이어야 함
	3. 모든 가능성을 고려해야 함
	4. 예시는 절차를 검증하는데 사용함

     🔎 순서도를 만들 때 사용자의 이벤트(버튼 클릭, 입력창 글자 입력 등)가 필요한 곳에서 순서도를 끊어야 함
     🔎 분기점 : 판단 결과에 따라 절차가 갈라짐

📌 HTML + CSS + JavaScript
     ◾ HTML	: 화면 요소(입력창, 버튼 글자 등)
     ◾ CSS		: 요소의 디자인
     ◾ JavaScript	: 프로그램의 작동

     🔎 자바스크립트 코드는 script 태그 안에 작성

📌 대화 상자 띄우기
     ◾ prompt 함수 : 직접 프로그램에 값을 전달함 (입력하지 않고 취소를 누르면 null이 전달됨)
	prompt('사용자에게 표시할 메시지');

     ◾ alert 함수 : 어떠한 메시지를 사용자에게 알릴 때 사용함
	alert('사용자에게 표시할 메시지');

     ◾ confirm 함수 : 사용자에게 의사를 물어볼 때 사용함 (확인은 true가 전달되고 취소는 false가 전달됨)
	confirm('사용자에게 표시할 메시지')

📌 HTML 태그 선택하기
     ◾ document.querySelector('선택자')		// 하나의 태그만 선택 가능함
     ◾ document.querySelectorAll('선택자')	// 여러 개의 태그 선택 가능함

     ◾ document.querySelector('#아이디')	// 하나의 태그만 사용할 경우 id 속성을 사용 (선택자로 #아이디를 사용함)
     ◾ document.querySelectorAll('.클래스')	// 여러 개의 태그를 동시에 선택할 경우 class 속성을 사용 (선택자로 .클래스를 사용함)

     ◾ document.querySelector('선택자 내부선택자 내부선택자...');	// 어떤 태그 안에 들어있는 다른 태그를 선택

     🔎 선택자 : HTML 태그를 선택할 수 있게 도와주는 문자열
     🔎 태그를 저장하는 변수명 : $ 으로 시작

📌 태그에 이벤트 달기
     ◾ addEventListener 함수
	태그.addEventListener('이벤트 이름', 리스너함수);

     ◾ 리스너 함수의 매개변수로 event 객체를 제공해서 이벤트와 관련된 정보를 얻음
	const 리스너함수 = (event) => {
	   console.log(event.target.value);
	};

     ◾ 입력창에 입력된 값을 value 속성으로 가져옴
	입력태그.value		// 입력창의 값을 가져옴
	입력태그.value = 값		// 입력창에 값을 넣음

     ◾ 일반 태그들의 내부 값을 가져올 때
	태그.textContent		// 태그 내부의 문자열을 가져옴
	태그.textContent = 값	// 태그 내부의 문자열을 해당 값으로 설정함

     ◾ 해당 태그 하이라이트
	입력태그.focus( )	// 입력창을 하이라이트

     🔎 이벤트 : 사용자가 태그와 상호 작용
     🔎 이벤트 리스너 : 자바스크립트가 HTML에서 발생하는 이벤트를 감지
     🔎 콜백 함수 : 특정 작업이 실행되고 난 뒤에 추가로 실행되는 함수

📌 올바른 단어인지 판단
     ◾ 문자열[자릿수]	// 문자열 중 문자를 분리해 해당 자리의 문자를 출력함
     ◾ 문자열.length		// 문자열의 길이 출력함

📌 순서도 최적화하기
     ◾ OR의 관계
	첫 번째 조건	두 번째 조건	최종 결과
	true		true		true
	true		false		true
	false		true		true
	false		false		false

     ◾ AND의 관계
	첫 번째 조건	두 번째 조건	최종 결과
	true		true		true
	true		false		false
	false		true		false
	false		false		false

📌 고차 함수 사용
     ◾ 고차 함수
	const func = ( ) => {
	   return ( ) => {
	      console.log('hello');
	   };
	};

     ◾ 반환된 함수는 다른 변수에 저장할 수 있고 그 변수에 저장된 함수를 다시 호출 할 수 있음
	const innerFunc = func();
	innerFunc();		// hello

     ◾ 반환하는 값을 바꾸고 싶을 때 매개변수 사용
	const func = (msg) => {
	   retunr () => {
	      console.log(msg);
	   };
	};

     ◾ 화살표 함수 문법에 따라 함수의 본문에서 바로 반환되는 값이 있으면 { 와 return을 생략할 수 있음
	const func = (msg) => ( ) => {
	   console.log(msg);
	};

     🔎 고차 함수(high order function) : 함수를 호출할 때마다 반환 함수를 생성하는 함수

📌 if문 중첩을 제거하는 방법 
     1. 공통된 절차를 각 분기점 내부에 넣음
     2. 분기점에서 짧은 절차부터 실행하게 if문을 작성함
     3. 짧은 절차가 끝나면 return(함수 내부의 경우)이나 break(for문 내부의 경우)로 중단함
     4. else를 제거함 (이때 중첩 하나가 제거됨)
     5. 다음 중첩된 분기점이 나올 때까지 1~4의 과정을 반복함

Let's Get IT 자바스크립트 프로그래밍 [2021.02.01] ------------------------------------------------------
Let's Get IT 자바스크립트 프로그래밍 [2021.02.01] ------------------------------------------------------

